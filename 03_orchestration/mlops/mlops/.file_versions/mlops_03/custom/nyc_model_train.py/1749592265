if 'custom' not in globals():
    from mage_ai.data_preparation.decorators import custom
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test
from sklearn.model_selection import train_test_split
import pandas as pd
from sklearn.feature_extraction import DictVectorizer
from mage_ai.data_preparation.shared.secrets import get_secret_value
from typing import List, Tuple
from pandas import DataFrame, Series
import mlflow
from sklearn.linear_model import LinearRegression
from sklearn.metrics import root_mean_squared_error
import os


@custom
def transform_custom(df: DataFrame, *args, **kwargs):
   
    categorical = ['PULocationID', 'DOLocationID']
    numerical = ['trip_distance']
    df[categorical] = df[categorical].astype(str)

    df_train, df_val = train_test_split(df, test_size=0.2, random_state=42)


    dv = DictVectorizer()

    train_dicts = df_train[categorical + numerical].to_dict(orient='records')
    X_train = dv.fit_transform(train_dicts)

    val_dicts = df_val[categorical + numerical].to_dict(orient='records')
    X_val = dv.transform(val_dicts)
    y_train = df_train[target].values
    y_val = df_val[target].values
    # mlflow.set_tracking_uri(os.getenv("MLFLOW_TRACKING_URI"))
    # EXPERIMENT_NAME = kwargs['EXPERIMENT_NAME']
    # mlflow.set_experiment(EXPERIMENT_NAME)


    # mlflow.sklearn.autolog()
    # with mlflow.start_run():
    lr = LinearRegression()
    lr.fit(X_train, y_train)

    y_pred = lr.predict(X_val)

    loss = root_mean_squared_error(y_val, y_pred)

    print(f"rmse: {loss}")
    print(f"Model intercept: {lr.intercept_}")
    return dv, lr


@test
def test_output(output, *args) -> None:
    """
    Template code for testing the output of the block.
    """
    assert output is not None, 'The output is undefined'
